name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DATASET_PATH: data/train_and_test2.csv

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check code formatting with Black
      run: |
        black --check app.py tests/
        
    - name: Lint with flake8
      run: |
        flake8 app.py tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  testing:
    runs-on: ubuntu-latest
    needs: linting
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download data with DVC
      env:
        DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
        DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        dvc remote modify origin --local auth basic
        dvc remote modify origin --local user $DAGSHUB_USER
        dvc remote modify origin --local password $DAGSHUB_TOKEN
        dvc pull
        
    - name: Test with pytest
      run: |
        python -m pytest tests/test_app.py -v --cov=app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: testing
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t titanic-survival-prediction:latest .
        
    - name: Test Docker image
      run: |
        docker run --rm titanic-survival-prediction:latest python -c "import pandas as pd; print('Docker image OK')"

  mlflow-test:
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download data with DVC
      env:
        DAGSHUB_USER: ${{ secrets.DAGSHUB_USER }}
        DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        dvc remote modify origin --local auth basic
        dvc remote modify origin --local user $DAGSHUB_USER
        dvc remote modify origin --local password $DAGSHUB_TOKEN
        dvc pull
        
    - name: Run MLflow training
      run: |
        python app.py
